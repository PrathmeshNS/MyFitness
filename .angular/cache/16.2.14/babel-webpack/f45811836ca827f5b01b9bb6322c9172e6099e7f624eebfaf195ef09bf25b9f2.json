{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet LoginPageComponent = class LoginPageComponent {\n  constructor(memberService, router) {\n    this.memberService = memberService;\n    this.router = router;\n    this.showLogin = true;\n    this.showForgetSection = true;\n    this.msg = true;\n    this.loginError = true;\n    this.confirmPassword = true;\n    this.member = {\n      memberId: 0,\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: '',\n      gender: '',\n      mobileNo: '',\n      forgetPasswordAnswer: '',\n      confirmPassword: ''\n    };\n  }\n  ngOnInit() {\n    if (localStorage.length > 0) {\n      this.setLocalStorage();\n      this.onSubmit();\n    }\n  }\n  onSubmit() {\n    this.memberService.loginMember(this.member).subscribe({\n      next: value => {\n        localStorage.setItem('email', this.member.email);\n        localStorage.setItem('password', this.member.password);\n        console.log('after Setting the values : ', this.member);\n        this.memberService.serviceMemberData = value;\n        this.router.navigate(['member']);\n      },\n      error: err => {\n        console.log(err);\n        this.loginError = false;\n      }\n    });\n  }\n  onCheck() {\n    this.memberService.checkForgetPassword(this.member).subscribe({\n      next: value => {\n        console.log(value);\n        this.showForgetSection = false;\n        this.member.password = \"\";\n      },\n      error: err => {\n        console.log(err);\n        this.msg = false;\n      }\n    });\n  }\n  onChangePassword() {\n    if (this.member.password.match(this.member.confirmPassword)) {\n      this.memberService.updatePassword(this.member).subscribe({\n        next: value => {\n          console.log(value);\n          this.showLogin = true;\n          this.member.email = \"\";\n          this.member.password = \"\";\n        },\n        error: err => {\n          console.log(err);\n        }\n      });\n    } else {\n      this.confirmPassword = false;\n    }\n  }\n  setLocalStorage() {\n    this.email = localStorage.getItem('email');\n    this.password = localStorage.getItem('password');\n    this.member.email = this.email.toString();\n    this.member.password = this.password.toString();\n  }\n};\nLoginPageComponent = __decorate([Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.css']\n})], LoginPageComponent);\nexport { LoginPageComponent };","map":{"version":3,"names":["Component","LoginPageComponent","constructor","memberService","router","showLogin","showForgetSection","msg","loginError","confirmPassword","member","memberId","firstName","lastName","email","password","gender","mobileNo","forgetPasswordAnswer","ngOnInit","localStorage","length","setLocalStorage","onSubmit","loginMember","subscribe","next","value","setItem","console","log","serviceMemberData","navigate","error","err","onCheck","checkForgetPassword","onChangePassword","match","updatePassword","getItem","toString","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\angular\\MyFitness\\src\\app\\login-page\\login-page.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Member } from '../entity/member';\nimport { MemberService } from '../services/member.service';\nimport { Route, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.css'],\n})\nexport class LoginPageComponent {\n  showLogin = true;\n  showForgetSection = true;\n  email: any;\n  password: any;\n  msg = true;\n  loginError = true;\n  confirmPassword= true;\n\n  member: Member = {\n    memberId: 0,\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n    gender: '',\n    mobileNo: '',\n    forgetPasswordAnswer: '',\n    confirmPassword: ''\n  };\n\n  constructor(private memberService: MemberService, private router: Router) {}\n\n  ngOnInit() {\n    if (localStorage.length > 0) {\n      this.setLocalStorage();\n      this.onSubmit();\n    }\n  }\n\n  onSubmit() {\n    this.memberService.loginMember(this.member).subscribe({\n      next: (value) => {\n        localStorage.setItem('email', this.member.email);\n        localStorage.setItem('password', this.member.password);\n        console.log('after Setting the values : ', this.member);\n        this.memberService.serviceMemberData = value;\n        this.router.navigate(['member']);\n      },\n      error: (err) => {\n        console.log(err);\n        this.loginError = false\n      },\n    });\n  }\n\n  onCheck() {\n    this.memberService.checkForgetPassword(this.member).subscribe({\n      next: (value) => {\n        console.log(value);\n        this.showForgetSection = false;\n        this.member.password = \"\";\n      },\n      error: (err) => {\n        console.log(err);\n        this.msg = false;\n      },\n    });\n  }\n\n  onChangePassword() {\n    if (this.member.password.match(this.member.confirmPassword)) {\n      this.memberService.updatePassword(this.member).subscribe({\n        next: (value) => {\n          console.log(value);\n          this.showLogin = true\n          this.member.email = \"\"\n          this.member.password = \"\"\n        },\n        error: (err) => {\n          console.log(err);\n        },\n      });\n    }\n    else{\n      this.confirmPassword = false\n    }\n  }\n\n  setLocalStorage() {\n    this.email = localStorage.getItem('email');\n    this.password = localStorage.getItem('password');\n    this.member.email = this.email.toString();\n    this.member.password = this.password.toString();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}