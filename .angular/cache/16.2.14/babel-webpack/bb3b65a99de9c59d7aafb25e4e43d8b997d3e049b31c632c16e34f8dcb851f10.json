{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./encrypt-decrypt.service\";\nclass StorageService {\n  constructor(encryptDecrypt) {\n    this.encryptDecrypt = encryptDecrypt;\n  }\n  setItemWithExpiry(key, value, ttl) {\n    // Set the item in localStorage\n    localStorage.setItem(key, this.encryptDecrypt.encryption(value));\n    // Set a timeout to remove it after ttl (in milliseconds)\n    setTimeout(() => {\n      localStorage.removeItem(key);\n      console.log(`${key} has been removed after ${ttl / 1000} seconds`);\n    }, ttl);\n  }\n  getItem(key) {\n    const value = localStorage.getItem(key);\n    if (value != null) {\n      return this.encryptDecrypt.decryption(value);\n    }\n    return null;\n  }\n  static #_ = this.ɵfac = function StorageService_Factory(t) {\n    return new (t || StorageService)(i0.ɵɵinject(i1.EncryptDecryptService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StorageService,\n    factory: StorageService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { StorageService };","map":{"version":3,"names":["StorageService","constructor","encryptDecrypt","setItemWithExpiry","key","value","ttl","localStorage","setItem","encryption","setTimeout","removeItem","console","log","getItem","decryption","_","i0","ɵɵinject","i1","EncryptDecryptService","_2","factory","ɵfac","providedIn"],"sources":["D:\\angular\\MyFitness\\src\\app\\services\\storage-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { EncryptDecryptService } from './encrypt-decrypt.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n\n  constructor( private encryptDecrypt:EncryptDecryptService) { }\n\n  setItemWithExpiry(key: string, value: string, ttl: number): void {\n    // Set the item in localStorage\n    localStorage.setItem(key, this.encryptDecrypt.encryption(value));\n\n    // Set a timeout to remove it after ttl (in milliseconds)\n    setTimeout(() => {\n      localStorage.removeItem(key);\n      console.log(`${key} has been removed after ${ttl / 1000} seconds`);\n    }, ttl);\n  }\n\n  getItem(key: string): string | null {\n    const value = localStorage.getItem(key)\n    if (value!=null) {\n      return this.encryptDecrypt.decryption(value);\n    }\n    return null;\n  }\n}\n"],"mappings":";;AAGA,MAGaA,cAAc;EAEzBC,YAAqBC,cAAoC;IAApC,KAAAA,cAAc,GAAdA,cAAc;EAA0B;EAE7DC,iBAAiBA,CAACC,GAAW,EAAEC,KAAa,EAAEC,GAAW;IACvD;IACAC,YAAY,CAACC,OAAO,CAACJ,GAAG,EAAE,IAAI,CAACF,cAAc,CAACO,UAAU,CAACJ,KAAK,CAAC,CAAC;IAEhE;IACAK,UAAU,CAAC,MAAK;MACdH,YAAY,CAACI,UAAU,CAACP,GAAG,CAAC;MAC5BQ,OAAO,CAACC,GAAG,CAAC,GAAGT,GAAG,2BAA2BE,GAAG,GAAG,IAAI,UAAU,CAAC;IACpE,CAAC,EAAEA,GAAG,CAAC;EACT;EAEAQ,OAAOA,CAACV,GAAW;IACjB,MAAMC,KAAK,GAAGE,YAAY,CAACO,OAAO,CAACV,GAAG,CAAC;IACvC,IAAIC,KAAK,IAAE,IAAI,EAAE;MACf,OAAO,IAAI,CAACH,cAAc,CAACa,UAAU,CAACV,KAAK,CAAC;;IAE9C,OAAO,IAAI;EACb;EAAC,QAAAW,CAAA,G;qBArBUhB,cAAc,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,qBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdrB,cAAc;IAAAsB,OAAA,EAAdtB,cAAc,CAAAuB,IAAA;IAAAC,UAAA,EAFb;EAAM;;SAEPxB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}