{"ast":null,"code":"import { ConstantValues } from '../constant/Constant';\nimport * as i0 from \"@angular/core\";\nclass EncryptDecryptService {\n  constructor() {}\n  encryption(data) {\n    return CryptoJS.AES.encrypt(data, ConstantValues.EN_KEYS).toString();\n  }\n  decryption(data) {\n    const decrypt = CryptoJS.AES.decrypt(data, ConstantValues.EN_KEYS);\n    return decrypt.toString(CryptoJS.enc.Utf8);\n  }\n  static #_ = this.ɵfac = function EncryptDecryptService_Factory(t) {\n    return new (t || EncryptDecryptService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EncryptDecryptService,\n    factory: EncryptDecryptService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { EncryptDecryptService };","map":{"version":3,"names":["ConstantValues","EncryptDecryptService","constructor","encryption","data","CryptoJS","AES","encrypt","EN_KEYS","toString","decryption","decrypt","enc","Utf8","_","_2","factory","ɵfac","providedIn"],"sources":["D:\\angular\\MyFitness\\src\\app\\services\\encrypt-decrypt.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ConstantValues } from '../constant/Constant';\nimport {*} \n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EncryptDecryptService {\n\n  constructor() { }\n\n  encryption(data: string) {\n    return CryptoJS.AES.encrypt(data, ConstantValues.EN_KEYS).toString();\n  }\n\n  decryption(data: string) {\n    const decrypt = CryptoJS.AES.decrypt(data, ConstantValues.EN_KEYS)\n    return decrypt.toString(CryptoJS.enc.Utf8);\n  }\n\n}\n"],"mappings":"AACA,SAASA,cAAc,QAAQ,sBAAsB;;AAGrD,MAGaC,qBAAqB;EAEhCC,YAAA,GAAgB;EAEhBC,UAAUA,CAACC,IAAY;IACrB,OAAOC,QAAQ,CAACC,GAAG,CAACC,OAAO,CAACH,IAAI,EAAEJ,cAAc,CAACQ,OAAO,CAAC,CAACC,QAAQ,EAAE;EACtE;EAEAC,UAAUA,CAACN,IAAY;IACrB,MAAMO,OAAO,GAAGN,QAAQ,CAACC,GAAG,CAACK,OAAO,CAACP,IAAI,EAAEJ,cAAc,CAACQ,OAAO,CAAC;IAClE,OAAOG,OAAO,CAACF,QAAQ,CAACJ,QAAQ,CAACO,GAAG,CAACC,IAAI,CAAC;EAC5C;EAAC,QAAAC,CAAA,G;qBAXUb,qBAAqB;EAAA;EAAA,QAAAc,EAAA,G;WAArBd,qBAAqB;IAAAe,OAAA,EAArBf,qBAAqB,CAAAgB,IAAA;IAAAC,UAAA,EAFpB;EAAM;;SAEPjB,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}