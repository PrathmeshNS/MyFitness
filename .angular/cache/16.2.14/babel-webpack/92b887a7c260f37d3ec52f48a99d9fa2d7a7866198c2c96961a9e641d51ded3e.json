{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet LoginPageComponent = class LoginPageComponent {\n  constructor(memberService, router, encryptDecryptService, stor) {\n    this.memberService = memberService;\n    this.router = router;\n    this.encryptDecryptService = encryptDecryptService;\n    this.stor = stor;\n    this.showLogin = true;\n    this.showForgetSection = true;\n    this.msg = true;\n    this.loginError = true;\n    this.confirmPassword = true;\n    this.member = {\n      memberId: 0,\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: '',\n      gender: '',\n      mobileNo: '',\n      forgetPasswordAnswer: '',\n      confirmPassword: ''\n    };\n    if (localStorage.getItem(\"memberEmail\") != null) {\n      this.autoLogin();\n    }\n  }\n  ngOnInit() {}\n  onSubmit() {\n    this.memberService.loginMember(this.member).subscribe({\n      next: value => {\n        this.setLocalStorage();\n        this.memberService.serviceMemberData = value;\n        this.router.navigate(['member/view']);\n      },\n      error: err => {\n        this.loginError = false;\n      }\n    });\n  }\n  onCheck() {\n    this.memberService.checkForgetPassword(this.member).subscribe({\n      next: value => {\n        this.showForgetSection = false;\n        this.member.password = \"\";\n      },\n      error: err => {\n        this.msg = false;\n      }\n    });\n  }\n  onChangePassword() {\n    if (this.member.password.match(this.member.confirmPassword)) {\n      this.memberService.updatePassword(this.member).subscribe({\n        next: value => {\n          this.showLogin = true;\n          this.member.email = \"\";\n          this.member.password = \"\";\n        },\n        error: err => {}\n      });\n    } else {\n      this.confirmPassword = false;\n    }\n  }\n  setLocalStorage() {\n    localStorage.setItem(\"memberEmail\", this.encryptDecryptService.encryption(this.member.email));\n    localStorage.setItem(\"memberPassword\", this.encryptDecryptService.encryption(this.member.password));\n  }\n  autoLogin() {\n    if (localStorage.getItem(\"memberEmail\") != null) {\n      const email = localStorage.getItem(\"memberEmail\");\n      const password = localStorage.getItem(\"memberPassword\");\n      if (email != null && password != null) {\n        this.member.email = this.encryptDecryptService.decryption(email.toString());\n        this.member.password = this.encryptDecryptService.decryption(password.toString());\n        console.log(\"email is : \", email, \" and Password Is : \", password);\n        this.onSubmit();\n      }\n    } else {\n      console.log(\"Member Not Found \");\n    }\n  }\n};\nLoginPageComponent = __decorate([Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.css']\n})], LoginPageComponent);\nexport { LoginPageComponent };","map":{"version":3,"names":["Component","LoginPageComponent","constructor","memberService","router","encryptDecryptService","stor","showLogin","showForgetSection","msg","loginError","confirmPassword","member","memberId","firstName","lastName","email","password","gender","mobileNo","forgetPasswordAnswer","localStorage","getItem","autoLogin","ngOnInit","onSubmit","loginMember","subscribe","next","value","setLocalStorage","serviceMemberData","navigate","error","err","onCheck","checkForgetPassword","onChangePassword","match","updatePassword","setItem","encryption","decryption","toString","console","log","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\angular\\MyFitness\\src\\app\\member\\member-login\\login-page.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Member } from '../../entity/member';\nimport { MemberService } from '../../services/member.service';\nimport { Route, Router } from '@angular/router';\nimport { EncryptDecryptService } from 'src/app/services/encrypt-decrypt.service';\n\n@Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.css'],\n})\nexport class LoginPageComponent {\n  showLogin = true;\n  showForgetSection = true;\n  msg = true;\n  loginError = true;\n  confirmPassword = true;\n\n  member: Member = {\n    memberId: 0,\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n    gender: '',\n    mobileNo: '',\n    forgetPasswordAnswer: '',\n    confirmPassword: ''\n  };\n\n  constructor(private memberService: MemberService, private router: Router, private encryptDecryptService: EncryptDecryptService, private stor) {\n    if (localStorage.getItem(\"memberEmail\") != null) {\n      this.autoLogin()\n    }\n  }\n\n  ngOnInit() {\n  }\n\n  onSubmit() {\n    this.memberService.loginMember(this.member).subscribe({\n      next: (value) => {\n        this.setLocalStorage()\n        this.memberService.serviceMemberData = value;\n        this.router.navigate(['member/view']);\n      },\n      error: (err) => {\n        this.loginError = false\n      },\n    });\n  }\n\n  onCheck() {\n    this.memberService.checkForgetPassword(this.member).subscribe({\n      next: (value) => {\n        this.showForgetSection = false;\n        this.member.password = \"\";\n      },\n      error: (err) => {\n        this.msg = false;\n      },\n    });\n  }\n\n  onChangePassword() {\n    if (this.member.password.match(this.member.confirmPassword)) {\n      this.memberService.updatePassword(this.member).subscribe({\n        next: (value) => {\n          this.showLogin = true\n          this.member.email = \"\"\n          this.member.password = \"\"\n        },\n        error: (err) => {\n        },\n      });\n    }\n    else {\n      this.confirmPassword = false\n    }\n  }\n\n  private setLocalStorage() {\n    localStorage.setItem(\"memberEmail\", this.encryptDecryptService.encryption(this.member.email));\n    localStorage.setItem(\"memberPassword\", this.encryptDecryptService.encryption(this.member.password));\n  }\n\n  private autoLogin() {\n    if (localStorage.getItem(\"memberEmail\") != null) {\n      const email = localStorage.getItem(\"memberEmail\");\n      const password = localStorage.getItem(\"memberPassword\");\n\n      if (email != null && password != null) {\n        this.member.email = this.encryptDecryptService.decryption(email.toString());\n        this.member.password = this.encryptDecryptService.decryption(password.toString());\n        console.log(\"email is : \", email, \" and Password Is : \", password)\n        this.onSubmit();\n      }\n\n    }\n    else {\n      console.log(\"Member Not Found \")\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}