{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet LoginPageComponent = class LoginPageComponent {\n  constructor() {\n    this.showLogin = true;\n    this.showForgetSection = true;\n    this.msg = true;\n    this.loginError = true;\n    this.confirmPassword = true;\n    this.member = {\n      memberId: 0,\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: '',\n      gender: '',\n      mobileNo: '',\n      forgetPasswordAnswer: '',\n      confirmPassword: ''\n    };\n  }\n};\nLoginPageComponent = __decorate([Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.css']\n})], LoginPageComponent);\nexport { LoginPageComponent };\n-ser;\n{\n  if (localStorage.getItem(\"memberEmail\") != null) {\n    this.autoLogin();\n  }\n}\nngOnInit();\n{}\nonSubmit();\n{\n  this.memberService.loginMember(this.member).subscribe({\n    next: value => {\n      this.setLocalStorage();\n      this.memberService.serviceMemberData = value;\n      this.router.navigate(['member/view']);\n    },\n    error: err => {\n      this.loginError = false;\n    }\n  });\n}\nonCheck();\n{\n  this.memberService.checkForgetPassword(this.member).subscribe({\n    next: value => {\n      this.showForgetSection = false;\n      this.member.password = \"\";\n    },\n    error: err => {\n      this.msg = false;\n    }\n  });\n}\nonChangePassword();\n{\n  if (this.member.password.match(this.member.confirmPassword)) {\n    this.memberService.updatePassword(this.member).subscribe({\n      next: value => {\n        this.showLogin = true;\n        this.member.email = \"\";\n        this.member.password = \"\";\n      },\n      error: err => {}\n    });\n  } else {\n    this.confirmPassword = false;\n  }\n}\nsetLocalStorage();\n{\n  localStorage.setItem(\"memberEmail\", this.encryptDecryptService.encryption(this.member.email));\n  localStorage.setItem(\"memberPassword\", this.encryptDecryptService.encryption(this.member.password));\n}\nautoLogin();\n{\n  if (localStorage.getItem(\"memberEmail\") != null) {\n    const email = localStorage.getItem(\"memberEmail\");\n    const password = localStorage.getItem(\"memberPassword\");\n    if (email != null && password != null) {\n      this.member.email = this.encryptDecryptService.decryption(email.toString());\n      this.member.password = this.encryptDecryptService.decryption(password.toString());\n      console.log(\"email is : \", email, \" and Password Is : \", password);\n      this.onSubmit();\n    }\n  } else {\n    console.log(\"Member Not Found \");\n  }\n}","map":{"version":3,"names":["Component","LoginPageComponent","constructor","showLogin","showForgetSection","msg","loginError","confirmPassword","member","memberId","firstName","lastName","email","password","gender","mobileNo","forgetPasswordAnswer","__decorate","selector","templateUrl","styleUrls","ser","localStorage","getItem","autoLogin","ngOnInit","onSubmit","memberService","loginMember","subscribe","next","value","setLocalStorage","serviceMemberData","router","navigate","error","err","onCheck","checkForgetPassword","onChangePassword","match","updatePassword","setItem","encryptDecryptService","encryption","decryption","toString","console","log"],"sources":["D:\\angular\\MyFitness\\src\\app\\member\\member-login\\login-page.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Member } from '../../entity/member';\nimport { MemberService } from '../../services/member.service';\nimport { Route, Router } from '@angular/router';\nimport { EncryptDecryptService } from 'src/app/services/encrypt-decrypt.service';\n\n@Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.css'],\n})\nexport class LoginPageComponent {\n  showLogin = true;\n  showForgetSection = true;\n  msg = true;\n  loginError = true;\n  confirmPassword = true;\n\n  member: Member = {\n    memberId: 0,\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n    gender: '',\n    mobileNo: '',\n    forgetPasswordAnswer: '',\n    confirmPassword: ''\n  };\n\n  constructor(private memberService: MemberService, private router: Router, private encryptDecryptService: EncryptDecryptService, private localStorage:storage-ser) {\n    if (localStorage.getItem(\"memberEmail\") != null) {\n      this.autoLogin()\n    }\n  }\n\n  ngOnInit() {\n  }\n\n  onSubmit() {\n    this.memberService.loginMember(this.member).subscribe({\n      next: (value) => {\n        this.setLocalStorage()\n        this.memberService.serviceMemberData = value;\n        this.router.navigate(['member/view']);\n      },\n      error: (err) => {\n        this.loginError = false\n      },\n    });\n  }\n\n  onCheck() {\n    this.memberService.checkForgetPassword(this.member).subscribe({\n      next: (value) => {\n        this.showForgetSection = false;\n        this.member.password = \"\";\n      },\n      error: (err) => {\n        this.msg = false;\n      },\n    });\n  }\n\n  onChangePassword() {\n    if (this.member.password.match(this.member.confirmPassword)) {\n      this.memberService.updatePassword(this.member).subscribe({\n        next: (value) => {\n          this.showLogin = true\n          this.member.email = \"\"\n          this.member.password = \"\"\n        },\n        error: (err) => {\n        },\n      });\n    }\n    else {\n      this.confirmPassword = false\n    }\n  }\n\n  private setLocalStorage() {\n    localStorage.setItem(\"memberEmail\", this.encryptDecryptService.encryption(this.member.email));\n    localStorage.setItem(\"memberPassword\", this.encryptDecryptService.encryption(this.member.password));\n  }\n\n  private autoLogin() {\n    if (localStorage.getItem(\"memberEmail\") != null) {\n      const email = localStorage.getItem(\"memberEmail\");\n      const password = localStorage.getItem(\"memberPassword\");\n\n      if (email != null && password != null) {\n        this.member.email = this.encryptDecryptService.decryption(email.toString());\n        this.member.password = this.encryptDecryptService.decryption(password.toString());\n        console.log(\"email is : \", email, \" and Password Is : \", password)\n        this.onSubmit();\n      }\n\n    }\n    else {\n      console.log(\"Member Not Found \")\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}